#!/usr/bin/env python3

from __future__ import print_function

import argparse
import os
import sys

try:
    from ament_pep8 import generate_pep8_report
except ImportError:
    # support running the script from source
    if not os.path.exists(
            os.path.join(os.path.dirname(os.path.dirname(__file__)),
                         'ament_pep8-extras.cmake')):
        raise
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
    from ament_pep8 import generate_pep8_report
from ament_pep8 import get_xunit_content


def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(
        description='Check code against the style conventions in PEP 8.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        'paths',
        nargs='*',
        default=[os.curdir],
        help="The files or directories to check. For directories files ending "
             "in '.py' will be considered.")
    # not using a file handle directly
    # in order to prevent leaving an empty file when something fails early
    parser.add_argument(
        '--xunit-file',
        help='Generate a xunit compliant XML file')
    args = parser.parse_args(argv)

    report = generate_pep8_report(args.paths)

    # print statistics about errors
    if report.total_errors:
        print('')
        report.print_statistics()

    # print summary
    print('')
    if not report.total_errors:
        print('No errors or warnings')
        rc = 0
    else:
        errors = report.get_count('E')
        warnings = report.get_count('W')
        print('%d errors, %d warnings' % (errors, warnings))
        rc = 1

    # generate xunit file
    if args.xunit_file:
        folder_name = os.path.basename(os.path.dirname(args.xunit_file))
        file_name = os.path.basename(args.xunit_file)
        suffix = '.xml'
        if file_name.endswith(suffix):
            file_name = file_name[0:-len(suffix)]
        testname = '%s.%s' % (folder_name, file_name)

        xml = get_xunit_content(report, testname)
        path = os.path.dirname(os.path.abspath(args.xunit_file))
        if not os.path.exists(path):
            os.makedirs(path)
        with open(args.xunit_file, 'w') as f:
            f.write(xml)

    return rc


if __name__ == '__main__':
    sys.exit(main())
