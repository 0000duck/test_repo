#!/usr/bin/env python3

from __future__ import print_function

import argparse
import os
import sys
import time

from pyflakes.api import checkPath

from ament_pyflakes import CustomReporter
from ament_pyflakes import get_xunit_content


def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(
        description='Check code using pyflakes.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        'paths',
        nargs='*',
        default=[os.curdir],
        help="The files or directories to check. For directories files ending "
             "in '.py' will be considered.")
    # not using a file handle directly
    # in order to prevent leaving an empty file when something fails early
    parser.add_argument(
        '--xunit-file',
        help='Generate a xunit compliant XML file')
    args = parser.parse_args(argv)

    if args.xunit_file:
        start_time = time.time()

    filenames = get_files(args.paths)
    if not filenames:
        print('No files found', file=sys.stderr)
        return 1

    report = []

    # invoke pyflakes for each file
    for filename in filenames:
        reporter = CustomReporter()
        print(filename)
        checkPath(filename, reporter=reporter)
        for error in reporter.errors:
            print(error, file=sys.stderr)
        report.append((filename, reporter.errors))
        print('')

   # output summary
    error_count = sum([len(r[1]) for r in report])
    if not error_count:
        print('No errors')
        rc = 0
    else:
        print('%d errors' % error_count, file=sys.stderr)
        rc = 1

    # generate xunit file
    if args.xunit_file:
        folder_name = os.path.basename(os.path.dirname(args.xunit_file))
        file_name = os.path.basename(args.xunit_file)
        suffix = '.xml'
        if file_name.endswith(suffix):
            file_name = file_name[0:-len(suffix)]
        testname = '%s.%s' % (folder_name, file_name)

        xml = get_xunit_content(report, testname, time.time() - start_time)
        path = os.path.dirname(os.path.abspath(args.xunit_file))
        if not os.path.exists(path):
            os.makedirs(path)
        with open(args.xunit_file, 'w') as f:
            f.write(xml)

    return rc


def get_files(paths):
    files = []
    for path in paths:
        if os.path.isdir(path):
            for dirpath, dirnames, filenames in os.walk(path):
                # ignore folder starting with . or _
                dirnames[:] = [d for d in dirnames if d[0] not in ['.', '_']]
                dirnames.sort()

                # select files by extension
                for filename in sorted(filenames):
                    if filename.endswith('.py'):
                        files.append(os.path.join(dirpath, filename))
        if os.path.isfile(path):
            files.append(path)
    return files


if __name__ == '__main__':
    sys.exit(main())
