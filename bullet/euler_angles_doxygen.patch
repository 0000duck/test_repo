Index: src/LinearMath/btMatrix3x3.h
===================================================================
--- src/LinearMath/btMatrix3x3.h	(revision 1779)
+++ src/LinearMath/btMatrix3x3.h	(working copy)
@@ -148,10 +148,10 @@
 		}
 		
 
-  /** @brief Set the matrix from euler angles using YPR around YXZ respectively
-   *  @param yaw Yaw about Y axis
-   *  @param pitch Pitch about X axis
-   *  @param roll Roll about Z axis 
+  /** @brief Set the matrix from euler angles using YPR around ZYX respectively
+   *  @param yaw Yaw about Z axis
+   *  @param pitch Pitch about Y axis
+   *  @param roll Roll about X axis 
    */
 		void setEulerYPR(const btScalar& yaw, const btScalar& pitch, const btScalar& roll) 
 		{
@@ -255,36 +255,18 @@
 			q.setValue(temp[0],temp[1],temp[2],temp[3]);
 		}
 
-  /**@brief Get the matrix represented as euler angles around YXZ, roundtrip with setEulerYPR
-   * @param yaw Yaw around Y axis
-   * @param pitch Pitch around X axis
-   * @param roll around Z axis */	
-		void getEulerYPR(btScalar& yaw, btScalar& pitch, btScalar& roll) const
+  /**@brief Get the matrix represented as euler angles around ZYX axes respectively, roundtrip with setEulerYPR
+   * @param yaw Yaw around Z axis
+   * @param pitch Pitch around Y axis
+   * @param roll around X axis */	
+                void getEulerYPR(btScalar& yaw, btScalar& pitch, btScalar& roll, unsigned int solution_number = 1) const
 		{
-			
-			// first use the normal calculus
-			yaw = btScalar(btAtan2(m_el[1].x(), m_el[0].x()));
-			pitch = btScalar(btAsin(-m_el[2].x()));
-			roll = btScalar(btAtan2(m_el[2].y(), m_el[2].z()));
-
-			// on pitch = +/-HalfPI
-			if (btFabs(pitch)==SIMD_HALF_PI)
-			{
-				if (yaw>0)
-					yaw-=SIMD_PI;
-				else
-					yaw+=SIMD_PI;
-
-				if (roll>0)
-					roll-=SIMD_PI;
-				else
-					roll+=SIMD_PI;
-			}
+                        getEulerZYX(yaw, pitch, roll, solution_number);
 		};
 
 
-  /**@brief Get the matrix represented as euler angles around ZYX
-   * @param yaw Yaw around X axis
+  /**@brief Get the matrix represented as euler angles around ZYX axes
+   * @param yaw Yaw around Z axis
    * @param pitch Pitch around Y axis
    * @param roll around X axis 
    * @param solution_number Which solution of two possible solutions ( 1 or 2) are possible values*/	
