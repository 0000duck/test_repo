macro(check_stdcxx)
    # Check C++11
    include(CheckCXXCompilerFlag)
    if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
        check_cxx_compiler_flag(--std=c++11 SUPPORTS_CXX11)
        if(SUPPORTS_CXX11)
            add_compile_options(--std=c++11)
            set(HAVE_CXX11 1)
        endif()
    else()
        set(HAVE_CXX11 1)
    endif()
endmacro()

macro(check_endianness)
    # Test endianness
    include(TestBigEndian)
    test_big_endian(BIG_ENDIAN)
    set(__BIG_ENDIAN__ ${BIG_ENDIAN})
endmacro()

macro(check_msvc_arch)
    if(MSVC10)
        if(CMAKE_CL_64)
            set(MSVC_ARCH "x64Win64VS2010")
        else()
            set(MSVC_ARCH "i86Win32VS2010")
        endif()
    elseif(MSVC11)
        if(CMAKE_CL_64)
            set(MSVC_ARCH "x64Win64VS2012")
        else()
            set(MSVC_ARCH "i86Win32VS2012")
        endif()
    elseif(MSVC12)
        if(CMAKE_CL_64)
            set(MSVC_ARCH "x64Win64VS2013")
        else()
            set(MSVC_ARCH "i86Win32VS2013")
        endif()
    endif()
endmacro()

macro(check_boost)
    # Find package Boost
    set(Boost_USE_STATIC_LIBS OFF)
    set(Boost_USE_MULTITHREADED ON)
    set(Boost_USE_STATIC_RUNTIME OFF)
    set(BOOST_ALL_DYN_LINK ON)
    if(WIN32 AND EPROSIMA_BUILD)
        set(BOOST_LIBRARYDIR $ENV{BOOST_LIBRARYDIR}/${MSVC_ARCH})
    endif()
    find_package(Boost COMPONENTS ${ARGN})
    if(NOT Boost_FOUND)
        message(FATAL_ERROR "Cannot find Boost libraries")
    endif()
endmacro()
