/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * fastcdr_LICENSE file included in this fastcdr distribution.
 *
 *************************************************************************
 * 
 * @file OwnershipTestSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "OwnershipTestSubscriber.h"

#include <algorithm>


OwnershipTestSubscriber::OwnershipTestSubscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

OwnershipTestSubscriber::~OwnershipTestSubscriber() {	Domain::removeParticipant(mp_participant);}

bool OwnershipTestSubscriber::init()
{
	ParticipantAttributes PParam;
	PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
	PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
	PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
	mp_participant = Domain::createParticipant(PParam);
	if(mp_participant == nullptr)
			return false;
	
	//Register the type
	
	Domain::registerType(mp_participant,(TopicDataType*) &myType);		
			
	// Create Subscriber
			
	SubscriberAttributes Rparam;
	Rparam.topic.topicKind = NO_KEY;
	Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
	Rparam.topic.topicName = "OwnershipTestPubSubTopic";
	mp_subscriber = Domain::createSubscriber(mp_participant,Rparam,(SubscriberListener*)&m_listener);
	if(mp_subscriber == nullptr)
		return false;
	return true;
}

void OwnershipTestSubscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
	if (info.status == MATCHED_MATCHING)
	{
		n_matched++;
		cout << "Subscriber matched" << endl;
	}
	else
	{
		n_matched--;
		cout << "Subscriber unmatched" << endl;
      RemoveFromHierarchy(info.remoteEndpointGuid);
	}
}

void OwnershipTestSubscriber::SubListener::AddToHierarchy(GUID_t guid, unsigned int ownershipStrength)
{
   m_writerStrengthHierarchy[ownershipStrength].insert(guid);
}

void OwnershipTestSubscriber::SubListener::RemoveFromHierarchy(GUID_t guid)
{
   for (auto &guidSet : m_writerStrengthHierarchy)
   {
       size_t elementsErased = guidSet.second.erase(guid);
       if (elementsErased && guidSet.second.empty())
       {
         m_writerStrengthHierarchy.erase(guidSet.first);
         return;
       }
   }
}

void OwnershipTestSubscriber::SubListener::ProcessStrongMessage(const ExampleMessage& st, GUID_t guid)
{
   // We extract the strongest set from the back of the map
   std::set<GUID_t>& strongestWriters = m_writerStrengthHierarchy.rbegin()->second;
   const GUID_t& prioritisedStrongestWriter = *(strongestWriters.begin());

   if(guid != prioritisedStrongestWriter)
   {
      cout << "Message with tied highest ownership strength discarded (lowest GUID prioritised)" << endl;
      return;
   }

   ++n_msg;
   cout << "Message received with index " << n_msg << ", and strength " << st.ownershipStrength() \
   << ", reading \"" << st.message() << "\"" << endl;	
}

void OwnershipTestSubscriber::SubListener::ProcessWeakMessage(const ExampleMessage& st, GUID_t guid)
{
   unsigned int currentHighestStrength = m_writerStrengthHierarchy.rbegin()->first;
   cout << "Weak message discarded (strength " << st.ownershipStrength() << " vs current maximum " << currentHighestStrength << ")." << endl;
}

void OwnershipTestSubscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
   // Take data
   ExampleMessage st;
   
   if(sub->takeNextData(&st, &m_info) &&
      m_info.sampleKind == ALIVE)
   {
      GUID_t publisherGuid = m_info.sample_identity.writer_guid();
      AddToHierarchy(publisherGuid, st.ownershipStrength());

      if (m_writerStrengthHierarchy.rbegin()->first == st.ownershipStrength())
          ProcessStrongMessage(st, publisherGuid); 
      else 
          ProcessWeakMessage(st, publisherGuid);
   }
}

void OwnershipTestSubscriber::run()
{
	cout << "Waiting for Data, press Enter to stop the Subscriber. "<<endl;
	std::cin.ignore();
	cout << "Shutting down the Subscriber." << endl;
}
