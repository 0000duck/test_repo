group JavaSource;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "PubSub.java"], description=[""])$

$if(!ctx.isPackageEmpty)$
package $ctx.package$;
$endif$

public class $ctx.filename$PubSub
{
    static
    {
        System.loadLibrary("$ctx.filename$JNI");
    }

    private native long $ctx.filename$PubSub_create_participant();

    public boolean isInit() { return (participant_ != 0); }

    public $ctx.filename$PubSub()
    {
        participant_ = $ctx.filename$PubSub_create_participant();
    }

    private native void $ctx.filename$PubSub_delete_participant(long participant);

    public void dispose()
    {
        if(participant_ != 0)
        {
            $ctx.filename$PubSub_delete_participant(participant_);
            participant_ = 0;
        }
    }

    private long participant_ = 0;

    $definitions; separator="\n"$
}
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<
$if(struct.isTopic)$
private native long $struct.name$_create_subscriber_internal(long participant);

public boolean is$struct.name$Init() { return ($struct.name$_ != 0); }

public void $struct.name$_create_subscriber()
{
    $struct.name$_ = $struct.name$_create_subscriber_internal(participant_);
}

private native void $struct.name$_delete_subscriber_internal(long pointer);

public void $struct.name$_delete_subscriber()
{
    if($struct.name$_ != 0)
    {
        $struct.name$_delete_subscriber_internal($struct.name$_);
        $struct.name$_ = 0;
    }
}

private long $struct.name$_ = 0;

$endif$
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

