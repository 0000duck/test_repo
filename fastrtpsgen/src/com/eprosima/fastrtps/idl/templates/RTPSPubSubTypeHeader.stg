group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "PubSubTypes.h"], description=["This header file contains the declaration of the serialization functions."])$


#ifndef _$ctx.fileNameUpper$_PUBSUBTYPES_H_
#define _$ctx.fileNameUpper$_PUBSUBTYPES_H_

#include "fastrtps/TopicDataType.h"

using namespace eprosima::fastrtps;

#include "$ctx.filename$.h"

$definitions; separator="\n"$

#endif // _$ctx.filename; format="toUpper"$_PUBSUBTYPE_H_
>>

// TODO name -> module
module(ctx, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
/*!
 * @brief This class represents the interface $interface.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
namespace $interface.name$
{
    $export_list$
}
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= << >>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<
const $const.typeCode.cppTypename$ $const.name$ = $const.value$;
>>

typedef_decl(ctx, typedefs) ::= <<
$typedefs : { typedef |typedef $typedef.typedefContentTypeCode.cppTypename$ $typedef.name$;}; separator="\n"$
>>

struct_type(ctx, struct) ::= <<
/*!
 * @brief This class represents the TopicDataType of the type $struct.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $struct.name$PubSubType : public TopicDataType {
public:
	$struct.name$PubSubType();
	virtual ~$struct.name$PubSubType();
	bool serialize(void *data, SerializedPayload_t *payload);
	bool deserialize(SerializedPayload_t *payload, void *data);
	bool getKey(void *data, InstanceHandle_t *ihandle);
	void* createData();
	void deleteData(void * data);
	MD5 m_md5;
	unsigned char* m_keyBuffer;
};
>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

