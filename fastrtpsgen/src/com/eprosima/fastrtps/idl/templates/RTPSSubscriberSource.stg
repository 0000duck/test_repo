group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Subscriber.cpp"], description=["This file contains the implementation of the subscriber functions."])$

#include "fastrtps/participant/Participant.h"
#include "fastrtps/attributes/ParticipantAttributes.h"
#include "fastrtps/subscriber/Subscriber.h"
#include "fastrtps/attributes/SubscriberAttributes.h"

#include "fastrtps/Domain.h"

#include "$ctx.filename$Subscriber.h"


$ctx.filename$Subscriber::$ctx.filename$Subscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

$ctx.filename$Subscriber::~$ctx.filename$Subscriber() {}

bool $ctx.filename$Subscriber::init()
{
	// Create RTPSParticipant
	
	ParticipantAttributes PParam;
	PParam.rtps.builtin.domainId = 80; //MUST BE THE SAME AS IN THE PUBLISHER
	PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
	PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
	mp_participant = Domain::createParticipant(PParam);
	if(mp_participant == nullptr)
			return false;
	
	//Register the type
	
	Domain::registerType(mp_participant,(TopicDataType*) &myType);		
			
	// Create Subscriber
			
	SubscriberAttributes Rparam;
	Rparam.topic.topicKind = NO_KEY;
	Rparam.topic.topicDataType = "$ctx.m_lastStructure$PubSubType"; //Must be registered before the creation of the subscriber
	Rparam.topic.topicName = "$ctx.filename$PubSubTopic";
	mp_subscriber = Domain::createSubscriber(mp_participant,Rparam,(SubscriberListener*)&m_listener);
	if(mp_subscriber == nullptr)
		return false;
	return true;
}

void $ctx.filename$Subscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo info)
{
	if (info.status == MATCHED_MATCHING)
	{
		n_matched++;
		cout << "Subscriber matched" << endl;
	}
	else
	{
		n_matched--;
		cout << "Subscriber unmatched" << endl;
	}
}

void $ctx.filename$Subscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
		// Take data
		$ctx.m_lastStructure$ st;
		
		if(sub->takeNextData(&st, &m_info))
		{
			if(m_info.sampleKind == ALIVE)
			{
				// Print your structure data here.
			}
		}
}

void $ctx.filename$Subscriber::run()
{
	cout << "Type something and press enter to stop the subscriber: "<<endl;
	int aux;
	std::cin \>\> aux;
}


>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(ctx.client)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual $paramRetType(operation.rettype)$ $operation.parent.formatedScopedname$_$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$) = 0;
$endif$

$if(ctx.dds)$
$if(!operation.oneway)$
/*!
 * @brief This asynchronous method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual void $operation.parent.formatedScopedname$_$operation.name$_async($operation.parent.scopedname$_$operation.name$CallbackHandler &obj$paramDeclsByValue(params=operation.inputparam, separatorInicial=", ")$) = 0;

$endif$
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
