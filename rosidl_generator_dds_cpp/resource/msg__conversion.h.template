@###############################################
@#
@# Conversion functions between ROS and DDS interfaces
@#
@# EmPy template for generating <msg>__conversion.h files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@###############################################

#ifndef __@(spec.base_type.pkg_name)__@(spec.base_type.type)__conversion__h__
#define __@(spec.base_type.pkg_name)__@(spec.base_type.type)__conversion__h__

#include "@(spec.base_type.pkg_name)/@(spec.base_type.type).h"
#include "@(spec.base_type.pkg_name)/dds_idl/@(spec.base_type.type)_.h"
#include "@(spec.base_type.pkg_name)/dds_idl/@(spec.base_type.type)_Dcps_impl.h"

#include "rosidl_generator_dds_cpp/resolver.h"

@##############################
@# Include conversion functions
@# for dependency messages
@##############################
@{
included = set([])
for field in spec.fields:
  if not field.type.is_primitive_type():
    if field.type not in included:
      print('#include "%s/dds_idl/%s__conversion.h";' %
          (field.type.pkg_name, field.type.type))
      included.add(field.type)
}@

namespace dds_idl
{

template<>
struct DDSTypeResolver<@(spec.base_type.pkg_name)::@(spec.base_type.type)>
{
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_ DDSMsgType;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)__var DDSMsgType_var;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_Seq DDSMsgSeqType;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_Seq_var DDSMsgSeqType_var;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_TypeSupport DDSMsgTypeSupportType;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_TypeSupport_var DDSMsgTypeSupportType_var;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_DataWriter DDSMsgDataWriterType;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_DataWriter_var DDSMsgDataWriterType_var;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_DataReader DDSMsgDataReaderType;
  typedef @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_DataReader_var DDSMsgDataReaderType_var;

  static void convert_ros_message_to_dds(const @(spec.base_type.pkg_name)::@(spec.base_type.type)& ros_message, @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_& dds_message)
  {
@[for field in spec.fields]@
    // @(field.type) @(field.name)
@[if field.type.is_array]@
    {
@[if field.type.array_size]@
      size_t size = @(field.type.array_size);
@[else]@
      size_t size = ros_message.@(field.name).size();
      dds_message.@(field.name)_.length(size);
@[end if]@
      for (size_t i = 0; i < size; i++) {
@[if field.type.is_primitive_type()]@
        dds_message.@(field.name)_[i] = ros_message.@(field.name)[i];
@[else]@
        ::dds_idl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_ros_message_to_dds(ros_message.@(field.name)[i], dds_message.@(field.name)_[i]);
@[end if]@
      }
    }
@[elif field.type.is_primitive_type()]@
    dds_message.@(field.name)_ = ros_message.@(field.name);
@[else]@
    ::dds_idl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_ros_message_to_dds(ros_message.@(field.name), dds_message.@(field.name)_);
@[end if]@

@[end for]@
  }

  static void convert_dds_message_to_ros(const @(spec.base_type.pkg_name)::dds_idl::@(spec.base_type.type)_& dds_message, @(spec.base_type.pkg_name)::@(spec.base_type.type)& ros_message)
  {
@[for field in spec.fields]@
    // @(field.type) @(field.name)
@[if field.type.is_array]@
    {
@[if field.type.array_size]@
      size_t size = @(field.type.array_size);
@[else]@
      size_t size = dds_message.@(field.name)_.length();
      ros_message.@(field.name).resize(size);
@[end if]@
      for (size_t i = 0; i < size; i++) {
@[if field.type.is_primitive_type()]@
        ros_message.@(field.name)[i] = dds_message.@(field.name)_[i];
@[else]@
        ::dds_idl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_dds_message_to_ros(dds_message.@(field.name)_[i], ros_message.@(field.name)[i]);
@[end if]@
      }
    }
@[elif field.type.is_primitive_type()]@
    ros_message.@(field.name) = dds_message.@(field.name)_;
@[else]@
    ::dds_idl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_dds_message_to_ros(dds_message.@(field.name)_, ros_message.@(field.name));
@[end if]@

@[end for]@
  }
};

};  // namespace dds_idl

#endif  // __@(spec.base_type.pkg_name)__@(spec.base_type.type)__conversion__h__
