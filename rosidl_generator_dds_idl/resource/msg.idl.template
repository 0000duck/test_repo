@###############################################
@#
@# ROS interface to DDS interface converter
@#
@# EmPy template for generating <msg>.idl files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@###############################################

@{
from rosidl_generator_dds_idl import msg_type_to_idl
from rosidl_generator_dds_idl import MSG_TYPE_TO_IDL
}@

#ifndef __@(spec.base_type.pkg_name)__@(spec.base_type.type)__h__
#define __@(spec.base_type.pkg_name)__@(spec.base_type.type)__h__

@#############################
@# Include dependency messages
@#############################
@{
included = set([])
#included_dcps = False
for field in spec.fields:
  if not field.type.is_primitive_type():
    if field.type not in included:
      print('#include "%s/dds_idl/%s_.idl";' %
          (field.type.pkg_name, field.type.type))
      included.add(field.type)
  #elif field.type in ['duration', 'time']:
  #  if not included_dcps:
  #    print('#ifndef OSPL_IDL_COMPILER')
  #    print('#include <dds_dcps.idl>')
  #    print('#endif')
  #    print('#ifdef COREDX_DDL_COMPILER')
  #    print('#include "dds.ddl"')
  #    print('#endif')
  #    included_dcps = True
}@

module @(spec.base_type.pkg_name)
{

module dds_idl
{

@##################
@# Define constants
@##################
@# Constants
@[for constant in spec.constants]@
  const @(MSG_TYPE_TO_IDL[constant.primitive_type]) @(spec.base_type.type)__@(constant.name) = @(constant.value);
@[end for]

@{
typedefs = set([])
for field in spec.fields:
  idl_typedef, idl_typedef_var, _ = msg_type_to_idl(field.type)
  if idl_typedef and idl_typedef_var and (idl_typedef, idl_typedef_var) not in typedefs:
    print('%s %s__%s__%s' % (idl_typedef, spec.base_type.pkg_name, spec.base_type.type, idl_typedef_var))
    typedefs.add((idl_typedef, idl_typedef_var))
}@

@################################
@# Message struct with all fields
@################################
struct @(spec.base_type.type)_
{

@[if spec.fields]@
@[  for field in spec.fields]@
@{    idl_typedef, idl_typedef_var, idl_type = msg_type_to_idl(field.type)}@
@[    if idl_typedef and idl_typedef_var]@
@(      spec.base_type.pkg_name)__@(spec.base_type.type)__@(idl_type) @(field.name)_;
@[    else]@
  @(idl_type) @(field.name)_;
@[    end if]@
@[  end for]@
@[  else]@
  boolean _dummy;
@[  end if]@

}; // struct @(spec.base_type.type)_

#pragma keylist @(spec.base_type.type)_

}; // namespace dds_idl

}; // namespace @(spec.base_type.pkg_name)

#endif  // __@(spec.base_type.pkg_name)__@(spec.base_type.type)__h__
