@###############################################
@#
@# ROS message type support code generation for C++
@#
@# EmPy template for generating <msg>_TypeSupport.h files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@###############################################

#ifndef __@(spec.base_type.pkg_name)__@(spec.base_type.type)_TypeSupport__h__
#define __@(spec.base_type.pkg_name)__@(spec.base_type.type)_TypeSupport__h__

#include "@(spec.base_type.pkg_name)/@(spec.base_type.type)_Struct.h"
#include "rosidl_generator_cpp/MessageTypeSupport.h"
#include "rosidl_typesupport_introspection_cpp/MessageTypeSupport.h"

namespace @(spec.base_type.pkg_name)
{

namespace type_support
{

static rosidl_typesupport_introspection_cpp::MessageTypeSupportMember member_array[@(len(spec.fields))] = {
@{
for index, field in enumerate(spec.fields):
    print('    {')

    print('        "%s",' % field.name)
    print('        "%s",' % field.type.type)  # TODO use type id
    print('        __builtin_offsetof(%s::%s, %s)' % (spec.base_type.pkg_name, spec.base_type.type, field.name))

    if index < len(spec.fields) - 1:
        print('    },')
    else:
        print('    }')
}@
};

static rosidl_typesupport_introspection_cpp::MessageTypeSupportMembers members = {
    "@(spec.base_type.pkg_name)",
    "@(spec.base_type.type)",
    @(len(spec.fields)),
    member_array
};

static rosidl_generator_cpp::MessageTypeSupportHandle handle = {
    rosidl_typesupport_introspection_cpp::_dynamic_identifier,
    &members
};

}  // namespace type_support

}  // namespace @(spec.base_type.pkg_name)


namespace rosidl_generator_cpp
{

template<>
struct MessageTypeSupport<@(spec.base_type.pkg_name)::@(spec.base_type.type)>
{
    static const rosidl_generator_cpp::MessageTypeSupportHandle& get_type_support_handle()
    {
        return @(spec.base_type.pkg_name)::type_support::handle;
    }
};

}  // namespace rosidl_generator_cpp

#endif  // __@(spec.base_type.pkg_name)__@(spec.base_type.type)_TypeSupport__h__
