@###############################################
@#
@# ROS message type support code generation for C++
@#
@# EmPy template for generating <msg>_TypeSupport.cpp files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@###############################################

#include <iostream>

#include "@(spec.base_type.pkg_name)/@(spec.base_type.type)_Struct.h"
#include "@(spec.base_type.pkg_name)/dds_opensplice/ccpp_@(spec.base_type.type)_.h"
#include <rosidl_typesupport_opensplice_cpp/message_type_support.h>
#include <rosidl_typesupport_opensplice_cpp/MessageTypeSupport.h>

@[for field in spec.fields]@
@[if not field.type.is_primitive_type()]@
@[if field.type.pkg_name == 'builtin_msgs']@
#include "rosidl_typesupport_opensplice_cpp/Duration_TypeSupport.h"
#include "rosidl_typesupport_opensplice_cpp/Time_TypeSupport.h"
@[else]@
namespace @(field.type.pkg_name) {
namespace dds_ {
struct @(field.type.type)_;
}  // namespace dds_
namespace type_support {
void convert_ros_message_to_dds(const @(field.type.pkg_name)::@(field.type.type)&, @(field.type.pkg_name)::dds_::@(field.type.type)_&);
void convert_dds_message_to_ros(const @(field.type.pkg_name)::dds_::@(field.type.type)_&, @(field.type.pkg_name)::@(field.type.type)&);
}  // namespace type_support
}  // namespace @(field.type.pkg_name)
@[end if]@
@[end if]@
@[end for]@

namespace @(spec.base_type.pkg_name)
{

namespace type_support
{

void register_type__@(spec.base_type.type)(void * untyped_participant, const char * type_name)
{
    DDS::DomainParticipant * participant = static_cast<DDS::DomainParticipant *>(untyped_participant);
    std::cout << "  @(spec.base_type.pkg_name)::type_support::register_type__@(spec.base_type.type)()" << std::endl;
    @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_TypeSupport * ros_message_ts = new @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_TypeSupport();
    DDS::ReturnCode_t status = ros_message_ts->register_type(participant, type_name);
    if (status != DDS::RETCODE_OK) {
        printf("register_type() failed. Status = %d\n", status);
        throw std::runtime_error("register_type failed");
    };
    //delete ros_message_ts;
}

void convert_ros_message_to_dds(const @(spec.base_type.pkg_name)::@(spec.base_type.type)& ros_message, @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_& dds_message)
{
    //std::cout << "  @(spec.base_type.pkg_name)::type_support::convert_ros_message_to_dds__@(spec.base_type.type)()" << std::endl;
@[for field in spec.fields]@
    // field.name @(field.name)
    // field.type @(field.type)
    // field.type.is_array @(field.type.is_array)
@[if field.type.array_size]@
    // field.type.array_size @(field.type.array_size)
@[else]@
    // field.type.array_size dynamic
@[end if]@
@[if field.type.is_array]@
    {
@[if field.type.array_size]@
        size_t size = @(field.type.array_size);
@[else]@
        size_t size = ros_message.@(field.name).size();
        dds_message.@(field.name)_.length(size);
@[end if]@
        for (size_t i = 0; i < size; i++) {
@[if field.type.type == 'string']@
            dds_message.@(field.name)_[i] = ros_message.@(field.name)[i].c_str();
@[elif field.type.is_primitive_type()]@
            dds_message.@(field.name)_[i] = ros_message.@(field.name)[i];
@[else]@
            //::dds_impl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_ros_message_to_dds(ros_message.@(field.name)[i], dds_message.@(field.name)_[i]);
            @(field.type.pkg_name)::type_support::convert_ros_message_to_dds(ros_message.@(field.name)[i], dds_message.@(field.name)_[i]);
@[end if]@
        }
    }
@[elif field.type.type == 'string']@
      dds_message.@(field.name)_ = ros_message.@(field.name).c_str();
@[elif field.type.is_primitive_type()]@
      dds_message.@(field.name)_ = ros_message.@(field.name);
@[else]@
      //::dds_impl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_ros_message_to_dds(ros_message.@(field.name), dds_message.@(field.name)_);
      @(field.type.pkg_name)::type_support::convert_ros_message_to_dds(ros_message.@(field.name), dds_message.@(field.name)_);
@[end if]@

@[end for]@
}

void publish__@(spec.base_type.type)(void * untyped_topic_writer, const void * untyped_ros_message)
{
    DDS::DataWriter * topic_writer = static_cast<DDS::DataWriter *>(untyped_topic_writer);
    //std::cout << "  @(spec.base_type.pkg_name)::type_support::publish__@(spec.base_type.type)()" << std::endl;

    const @(spec.base_type.pkg_name)::@(spec.base_type.type) & ros_message = *(const @(spec.base_type.pkg_name)::@(spec.base_type.type) *)untyped_ros_message;
    //@(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_ dds_message;
    @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_ * dds_message = new @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_();
    convert_ros_message_to_dds(ros_message, *dds_message);

    @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_DataWriter * data_writer = @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_DataWriter::_narrow(topic_writer);
    //std::cout << "  @(spec.base_type.pkg_name)::type_support::publish__@(spec.base_type.type)() write dds message" << std::endl;
    DDS::ReturnCode_t status = data_writer->write(*dds_message, DDS::HANDLE_NIL);
    if (status != DDS::RETCODE_OK) {
        printf("write() failed. Status = %d\n", status);
        throw std::runtime_error("write failed");
    };

    delete dds_message;
}


void convert_dds_message_to_ros(const @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_& dds_message, @(spec.base_type.pkg_name)::@(spec.base_type.type)& ros_message)
{
    //std::cout << "  @(spec.base_type.pkg_name)::type_support::convert_dds_message_to_ros__@(spec.base_type.type)()" << std::endl;
@[for field in spec.fields]@
    // field.name @(field.name)
    // field.type @(field.type)
    // field.type.is_array @(field.type.is_array)
@[if field.type.array_size]@
    // field.type.array_size @(field.type.array_size)
@[else]@
    // field.type.array_size dynamic
@[end if]@
@[if field.type.is_array]@
    {
@[if field.type.array_size]@
        size_t size = @(field.type.array_size);
@[else]@
        size_t size = dds_message.@(field.name)_.length();
        ros_message.@(field.name).resize(size);
@[end if]@
        for (size_t i = 0; i < size; i++) {
@[if field.type.is_primitive_type()]@
            ros_message.@(field.name)[i] = dds_message.@(field.name)_[i];
@[else]@
            //::dds_impl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_ros_message_to_dds(ros_message.@(field.name)[i], dds_message.@(field.name)_[i]);
            @(field.type.pkg_name)::type_support::convert_dds_message_to_ros(dds_message.@(field.name)_[i], ros_message.@(field.name)[i]);
@[end if]@
        }
    }
@[elif field.type.is_primitive_type()]@
      ros_message.@(field.name) = dds_message.@(field.name)_;
@[else]@
      //::dds_impl::DDSTypeResolver<@(field.type.pkg_name)::@(field.type.type)>::convert_ros_message_to_dds(ros_message.@(field.name), dds_message.@(field.name)_);
      @(field.type.pkg_name)::type_support::convert_dds_message_to_ros(dds_message.@(field.name)_, ros_message.@(field.name));
@[end if]@

@[end for]@
}

bool take__@(spec.base_type.type)(void * untyped_topic_reader, void * untyped_ros_message)
{
    DDS::DataReader * topic_reader = static_cast<DDS::DataReader *>(untyped_topic_reader);
    //std::cout << "  @(spec.base_type.pkg_name)::type_support::publish__@(spec.base_type.type)()" << std::endl;

    @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_DataReader * data_reader = @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_DataReader::_narrow(topic_reader);
    //std::cout << "  @(spec.base_type.pkg_name)::type_support::publish__@(spec.base_type.type)() write dds message" << std::endl;

    @(spec.base_type.pkg_name)::dds_::@(spec.base_type.type)_Seq dds_messages;
    DDS::SampleInfoSeq sample_infos;
    DDS::ReturnCode_t status = data_reader->take(
        dds_messages,
        sample_infos,
        1,
        DDS::ANY_SAMPLE_STATE,
        DDS::ANY_VIEW_STATE,
        DDS::ALIVE_INSTANCE_STATE);

    if (status == DDS::RETCODE_NO_DATA) {
        return false;
    }
    if (status != DDS::RETCODE_OK) {
        printf("take() failed. Status = %d\n", status);
        throw std::runtime_error("Read failed");
    };

    if (untyped_ros_message == 0) {
        printf("take() invoked without a valid ROS message pointer\n");
        throw std::runtime_error("invalid ROS message pointer");
    };

    @(spec.base_type.pkg_name)::@(spec.base_type.type) & ros_message = *(@(spec.base_type.pkg_name)::@(spec.base_type.type) *)untyped_ros_message;
    convert_dds_message_to_ros(dds_messages[0], ros_message);

    data_reader->return_loan(dds_messages, sample_infos);

    return true;
}

static message_type_support_callbacks_t callbacks = {
    "@(spec.base_type.pkg_name)",
    "@(spec.base_type.type)",
    &register_type__@(spec.base_type.type),
    &publish__@(spec.base_type.type),
    &take__@(spec.base_type.type)
};

static rosidl_message_type_support_t handle = {
    "opensplice_static",
    &callbacks
};

}  // namespace type_support

}  // namespace @(spec.base_type.pkg_name)

namespace rmw_opensplice_cpp
{

template<>
const rosidl_message_type_support_t * get_type_support_handle<@(spec.base_type.pkg_name)::@(spec.base_type.type)>()
{
    return &@(spec.base_type.pkg_name)::type_support::handle;
}

}  // namespace rmw_opensplice_cpp

namespace rosidl_generator_cpp
{

template<>
const rosidl_message_type_support_t *
get_type_support_handle<@(spec.base_type.pkg_name)::@(spec.base_type.type)>()
{
    return rmw_opensplice_cpp::get_type_support_handle<
        @(spec.base_type.pkg_name)::@(spec.base_type.type)>();
}

}  // namespace rosidl_generator_cpp
