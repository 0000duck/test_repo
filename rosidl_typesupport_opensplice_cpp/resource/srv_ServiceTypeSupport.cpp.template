@###############################################
@#
@# ROS message type support code generation for C++
@#
@# EmPy template for generating <msg>_ServiceTypeSupport.cpp files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.ServiceSpecification)
@#    Parsed specification of the .srv file
@###############################################
// This file was generated from:
//   rosidl_typesupport_opensplice_cpp/srv_ServiceTypeSupport.cpp.template
#include <iostream>

#include "@(spec.pkg_name)/@(spec.srv_name)_Service.h"
#include "rosidl_generator_cpp/ServiceTypeSupport.h"
#include "rosidl_typesupport_opensplice_cpp/ServiceTypeSupport.h"
#include "rosidl_typesupport_opensplice_cpp/service_type_support.h"

#if defined _WIN32 || defined __CYGWIN__
  #ifdef __GNUC__
    #define DLLEXPORT __attribute__ ((dllexport))
  #else
    #define DLLEXPORT __declspec(dllexport)
  #endif
#else
  #define DLLEXPORT
#endif

namespace @(spec.pkg_name)
{

namespace service_type_support
{

static service_type_support_callbacks_t callbacks = {
    "@(spec.pkg_name)",
    "@(spec.srv_name)",
};

static rosidl_service_type_support_t handle = {
    "opensplice_static",
    &callbacks
};

}  // namespace service_type_support

}  // namespace @(spec.pkg_name)


namespace rmw_opensplice_cpp
{

template<>
const rosidl_service_type_support_t *
get_service_type_support_handle<@(spec.pkg_name)::@(spec.srv_name)>()
{
    return &@(spec.pkg_name)::service_type_support::handle;
}

}  // namespace rmw_opensplice_cpp

namespace rosidl_generator_cpp
{

template<>
DLLEXPORT
const rosidl_service_type_support_t *
get_service_type_support_handle<@(spec.pkg_name)::@(spec.srv_name)>()
{
    return rmw_opensplice_cpp::get_service_type_support_handle<
        @(spec.pkg_name)::@(spec.srv_name)>();
}

}  // namespace rosidl_generator_cpp
