group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "RTPSPubSubType.cpp"], description=["This header file contains the implementation of the serialization functions."])$


#include "fastcdr/FastBuffer.h"
#include "fastcdr/Cdr.h"

#include "$ctx.filename$PubSubType.h"

$ctx.filename$PubSubType::$ctx.filename$PubSubType() 
{
	m_topicDataTypeName = std::string("$ctx.m_firstStructure$PubSubType");
	m_typeSize = (uint32_t)$ctx.m_firstStructure$::getMaxCdrSerializedSize();
	m_isGetKeyDefined = $ctx.m_firstStructure$::isKeyDefined();
	m_keyBuffer = (unsigned char*)malloc($ctx.m_firstStructure$::getKeyMaxCdrSerializedSize()>16 ? $ctx.m_firstStructure$::getKeyMaxCdrSerializedSize() : 16);
}

$ctx.filename$PubSubType::~$ctx.filename$PubSubType() 
{
	if(m_keyBuffer!=NULL)
		delete(m_keyBuffer);
}

bool $ctx.filename$PubSubType::serialize(void *data, SerializedPayload_t *payload) 
{
	$ctx.m_firstStructure$ *p_type = ($ctx.m_firstStructure$*) data;
	
	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size);
	// Object that serializes the data.
	eprosima::fastcdr::Cdr ser(fastbuffer,eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS);
	//Select the correct endianess
	payload->encapsulation = CDR_LE; 
	// Serialize the object:
	p_type->serialize(ser);
	//Get the serialized length
    payload->length = (uint16_t)ser.getSerializedDataLength();
    	
	return true;
}

bool $ctx.filename$PubSubType::deserialize(SerializedPayload_t* payload, void* data)
{
	//CONVERT DATA to pointer of your type
	$ctx.m_firstStructure$* p_type = ($ctx.m_firstStructure$*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length);
	//select the correct endianess
	eprosima::fastcdr::Cdr::Endianness endian = payload->encapsulation == CDR_LE ? eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS : eprosima::fastcdr::Cdr::BIG_ENDIANNESS;
	// Object that deserializes the data.
	eprosima::fastcdr::Cdr deser(fastbuffer,endian);
	//deserialize the object:
	p_type->deserialize(deser);
	return true;
}

bool $ctx.filename$PubSubType::getKey(void *data, InstanceHandle_t* handle) 
{
	if(!m_isGetKeyDefined)
		return false;

	$ctx.m_firstStructure$* p_type = ($ctx.m_firstStructure$*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,$ctx.m_firstStructure$::getKeyMaxCdrSerializedSize());
	// Object that serializes the data.
	eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);

	p_type->serializeKey(ser);
	if($ctx.m_firstStructure$::getKeyMaxCdrSerializedSize()>16)
	{
		m_md5.init();
		m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
		m_md5.finalize();
		for(uint8_t i = 0;i<16;++i)
    	{
        	handle->value[i] = m_md5.digest[i];
    	}
    	}
    else
    {
    	for(uint8_t i = 0;i<16;++i)
    	{
        	handle->value[i] = m_keyBuffer[i];
    	}
    }
	
	return true;
}

>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(ctx.client)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual $paramRetType(operation.rettype)$ $operation.parent.formatedScopedname$_$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$) = 0;
$endif$

$if(ctx.dds)$
$if(!operation.oneway)$
/*!
 * @brief This asynchronous method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual void $operation.parent.formatedScopedname$_$operation.name$_async($operation.parent.scopedname$_$operation.name$CallbackHandler &obj$paramDeclsByValue(params=operation.inputparam, separatorInicial=", ")$) = 0;

$endif$
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
