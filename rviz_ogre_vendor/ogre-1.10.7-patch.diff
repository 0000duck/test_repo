diff --git a/CMake/Templates/OGREConfig.cmake.in b/CMake/Templates/OGREConfig.cmake.in
index 4f9b6dedc..c0484e582 100644
--- a/CMake/Templates/OGREConfig.cmake.in
+++ b/CMake/Templates/OGREConfig.cmake.in
@@ -74,10 +74,10 @@ if(@OGRE_BUILD_COMPONENT_BITES@)
     
     if(@SDL2_FOUND@)
         list(APPEND OGRE_Bites_INCLUDE_DIRS @SDL2_INCLUDE_DIR@)
-        list(APPEND OGRE_Bites_LIBRARIES @SDL2_LIBRARY@)
+        list(APPEND OGRE_Bites_LIBRARIES "@SDL2_LIBRARY@")
         
         list(APPEND OGRE_INCLUDE_DIRS @SDL2_INCLUDE_DIR@)
-        list(APPEND OGRE_LIBRARIES @SDL2_LIBRARY@)
+        list(APPEND OGRE_LIBRARIES "@SDL2_LIBRARY@")
     endif()
 endif()
 if(@OGRE_BUILD_COMPONENT_HLMS@)
diff --git a/CMake/Utils/OgreConfigTargets.cmake b/CMake/Utils/OgreConfigTargets.cmake
index 9cb83ecbf..10a3f4f6e 100644
--- a/CMake/Utils/OgreConfigTargets.cmake
+++ b/CMake/Utils/OgreConfigTargets.cmake
@@ -55,24 +55,24 @@ elseif (UNIX)
   set(OGRE_RELWDBG_PATH "")
   set(OGRE_MINSIZE_PATH "")
   set(OGRE_DEBUG_PATH "/debug")
-  if (NOT APPLE)
+  # if (NOT APPLE)
 	set(OGRE_DEBUG_PATH "")
-  endif ()
+  # endif ()
   set(OGRE_LIB_RELEASE_PATH "")
   set(OGRE_LIB_RELWDBG_PATH "")
   set(OGRE_LIB_MINSIZE_PATH "")
   set(OGRE_LIB_DEBUG_PATH "")
-  if(APPLE AND NOT APPLE_IOS)
-    set(OGRE_RELEASE_PATH "/${PLATFORM_NAME}")
-  endif()
+  # if(APPLE AND NOT APPLE_IOS)
+  #   set(OGRE_RELEASE_PATH "/${PLATFORM_NAME}")
+  # endif()
   if(APPLE AND APPLE_IOS)
     set(OGRE_LIB_RELEASE_PATH "/Release")
   endif(APPLE AND APPLE_IOS)
-  if (APPLE)
-    set(OGRE_PLUGIN_PATH "/")
-  else()
+  # if (APPLE)
+    # set(OGRE_PLUGIN_PATH "/")
+  # else()
     set(OGRE_PLUGIN_PATH "/OGRE")
-  endif(APPLE)
+  # endif(APPLE)
   set(OGRE_SAMPLE_PATH "/OGRE/Samples")
 endif ()
 
@@ -232,23 +232,23 @@ function(ogre_config_component LIBNAME)
 endfunction(ogre_config_component)
 
 function(ogre_config_framework LIBNAME)
-  get_target_property(targetType ${LIBNAME} TYPE)
-  if (APPLE AND NOT APPLE_IOS AND NOT (${targetType} STREQUAL "STATIC_LIBRARY"))
-      set_target_properties(${LIBNAME} PROPERTIES FRAMEWORK TRUE)
-
-      # Set the INSTALL_PATH so that frameworks can be installed in the application package
-      set_target_properties(${LIBNAME}
-         PROPERTIES BUILD_WITH_INSTALL_RPATH 1
-         INSTALL_NAME_DIR "@executable_path/../Frameworks"
-      )
-      set_target_properties(${LIBNAME} PROPERTIES PUBLIC_HEADER "${HEADER_FILES};${PLATFORM_HEADERS};" )
-      set_target_properties(${LIBNAME} PROPERTIES XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER "YES")
-      set_target_properties(${LIBNAME} PROPERTIES XCODE_ATTRIBUTE_GCC_PREFIX_HEADER "${OGRE_SOURCE_DIR}/OgreMain/include/OgreStableHeaders.h")
-      set_target_properties(${LIBNAME} PROPERTIES RESOURCE "${RESOURCE_FILES}")
-      set_source_files_properties("${RESOURCE_FILES}" PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
-
-      set_target_properties(${LIBNAME} PROPERTIES OUTPUT_NAME ${LIBNAME})
-  endif()
+  # get_target_property(targetType ${LIBNAME} TYPE)
+  # if (APPLE AND NOT APPLE_IOS AND NOT (${targetType} STREQUAL "STATIC_LIBRARY"))
+  #     set_target_properties(${LIBNAME} PROPERTIES FRAMEWORK TRUE)
+
+  #     # Set the INSTALL_PATH so that frameworks can be installed in the application package
+  #     set_target_properties(${LIBNAME}
+  #        PROPERTIES BUILD_WITH_INSTALL_RPATH 1
+  #        INSTALL_NAME_DIR "@executable_path/../Frameworks"
+  #     )
+  #     set_target_properties(${LIBNAME} PROPERTIES PUBLIC_HEADER "${HEADER_FILES};${PLATFORM_HEADERS};" )
+  #     set_target_properties(${LIBNAME} PROPERTIES XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER "YES")
+  #     set_target_properties(${LIBNAME} PROPERTIES XCODE_ATTRIBUTE_GCC_PREFIX_HEADER "${OGRE_SOURCE_DIR}/OgreMain/include/OgreStableHeaders.h")
+  #     set_target_properties(${LIBNAME} PROPERTIES RESOURCE "${RESOURCE_FILES}")
+  #     set_source_files_properties("${RESOURCE_FILES}" PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
+
+  #     set_target_properties(${LIBNAME} PROPERTIES OUTPUT_NAME ${LIBNAME})
+  # endif()
 endfunction(ogre_config_framework)
 
 # setup plugin build
diff --git a/OgreMain/CMakeLists.txt b/OgreMain/CMakeLists.txt
index 595b94a94..6801896f8 100644
--- a/OgreMain/CMakeLists.txt
+++ b/OgreMain/CMakeLists.txt
@@ -374,39 +374,39 @@ if (APPLE)
         LINK_FLAGS "-framework IOKit -framework Cocoa -framework Carbon -framework OpenGL -framework CoreVideo"
     )
 
-    set(OGRE_OSX_BUILD_CONFIGURATION "$(PLATFORM_NAME)/$(CONFIGURATION)")
+  #   set(OGRE_OSX_BUILD_CONFIGURATION "$(PLATFORM_NAME)/$(CONFIGURATION)")
   
-  	add_custom_command(TARGET OgreMain POST_BUILD
-		COMMAND mkdir ARGS -p ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/Threading
-        COMMAND ditto 
-		${OGRE_SOURCE_DIR}/OgreMain/include/Threading/*.h ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/Threading
-		COMMAND mkdir ARGS -p ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/OSX
-        COMMAND ditto 
-		${OGRE_SOURCE_DIR}/OgreMain/include/OSX/*.h ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/OSX
-		COMMAND cd ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers
-		)
-
-    foreach(HEADER_PATH ${THREAD_HEADER_FILES})
-        get_filename_component(HEADER_FILE ${HEADER_PATH} NAME)
-        set(FWK_HEADER_PATH ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/${HEADER_FILE})
-        add_custom_command(TARGET OgreMain POST_BUILD
-            COMMAND rm -f ${FWK_HEADER_PATH}
-            )
-    endforeach()
-
-    foreach(HEADER_PATH ${PLATFORM_HEADERS})
-        get_filename_component(HEADER_FILE ${HEADER_PATH} NAME)
-        set(FWK_HEADER_PATH ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/${HEADER_FILE})
-        add_custom_command(TARGET OgreMain POST_BUILD
-            COMMAND rm -f ${FWK_HEADER_PATH}
-            )
-    endforeach()
-
-    ogre_config_framework(OgreMain)
+  # 	add_custom_command(TARGET OgreMain POST_BUILD
+		# COMMAND mkdir ARGS -p ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/Threading
+  #       COMMAND ditto 
+		# ${OGRE_SOURCE_DIR}/OgreMain/include/Threading/*.h ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/Threading
+		# COMMAND mkdir ARGS -p ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/OSX
+  #       COMMAND ditto 
+		# ${OGRE_SOURCE_DIR}/OgreMain/include/OSX/*.h ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/OSX
+		# COMMAND cd ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers
+		# )
+
+  #   foreach(HEADER_PATH ${THREAD_HEADER_FILES})
+  #       get_filename_component(HEADER_FILE ${HEADER_PATH} NAME)
+  #       set(FWK_HEADER_PATH ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/${HEADER_FILE})
+  #       add_custom_command(TARGET OgreMain POST_BUILD
+  #           COMMAND rm -f ${FWK_HEADER_PATH}
+  #           )
+  #   endforeach()
+
+  #   foreach(HEADER_PATH ${PLATFORM_HEADERS})
+  #       get_filename_component(HEADER_FILE ${HEADER_PATH} NAME)
+  #       set(FWK_HEADER_PATH ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/${HEADER_FILE})
+  #       add_custom_command(TARGET OgreMain POST_BUILD
+  #           COMMAND rm -f ${FWK_HEADER_PATH}
+  #           )
+  #   endforeach()
+
+  #   ogre_config_framework(OgreMain)
   endif ()
 
-  # Framework is called 'Ogre'
-  set_target_properties(OgreMain PROPERTIES	OUTPUT_NAME Ogre)
+  # # Framework is called 'Ogre'
+  # set_target_properties(OgreMain PROPERTIES	OUTPUT_NAME Ogre)
 endif ()
 target_link_libraries(OgreMain ${LIBRARIES})
 if (MINGW)
diff --git a/OgreMain/include/OgreString.h b/OgreMain/include/OgreString.h
index f1c41e7..925d6ab 100644
--- a/OgreMain/include/OgreString.h
+++ b/OgreMain/include/OgreString.h
@@ -76,6 +76,14 @@ namespace __gnu_cxx
 #   define strtol_l(ptr, end, base, l) strtol(ptr, end, base)
 #endif
 
+// If compiling with make on macOS, these headers need to be included to get
+// definitions of locale_t, strtod_l, etc...
+// See: http://www.unix.com/man-page/osx/3/strtod_l/
+#if OGRE_PLATFORM == OGRE_PLATFORM_APPLE
+#   include <stdlib.h>
+#   include <xlocale.h>
+#endif
+
 namespace Ogre {
     /** \addtogroup Core
      *  @{
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5cebc43..66693fe 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -36,11 +36,14 @@ if (APPLE AND NOT ANDROID)
     CMAKE_FORCE_C_COMPILER(clang GNU)
     CMAKE_FORCE_CXX_COMPILER(clang++ GNU)
   endif()
-  SET(CMAKE_SIZEOF_VOID_P 4)
-  set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "com.apple.compilers.llvm.clang.1_0")
-  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
-  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
-  
+  if(CMAKE_GENERATOR STREQUAL "Xcode")
+    SET(CMAKE_SIZEOF_VOID_P 4)
+    set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "com.apple.compilers.llvm.clang.1_0")
+    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
+    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
+  else()
+    set(CMAKE_CXX_STANDARD 11)
+  endif()
   # otherwise apple defines a macro named check that conflicts with boost
   add_definitions(-D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0)
 endif ()
@@ -326,9 +326,6 @@ elseif (APPLE AND NOT APPLE_IOS)
     endif()
   endif()
 
-  # 10.7 is the minimum for libc++ support
-  set(CMAKE_OSX_DEPLOYMENT_TARGET 10.7)
-
   # Make sure that the OpenGL render system is selected for non-iOS Apple builds
   set(OGRE_BUILD_RENDERSYSTEM_GLES FALSE)
   set(OGRE_BUILD_RENDERSYSTEM_GLES2 FALSE)

diff --git a/CMake/InstallResources.cmake b/CMake/InstallResources.cmake
index dd12a93..a2dcf50 100644
--- a/CMake/InstallResources.cmake
+++ b/CMake/InstallResources.cmake
@@ -177,6 +177,10 @@ if (OGRE_INSTALL_SAMPLES OR OGRE_INSTALL_SAMPLES_SOURCE)
 
 endif (OGRE_INSTALL_SAMPLES OR OGRE_INSTALL_SAMPLES_SOURCE)
 
+if(OGRE_INSTALL_GENERIC_PLUGINS_CFG)
+  install(FILES ${OGRE_BINARY_DIR}/inst/bin/release/plugins.cfg DESTINATION share/OGRE)
+  install(FILES ${OGRE_BINARY_DIR}/inst/bin/debug/plugins_d.cfg DESTINATION share/OGRE)
+endif()
 
 # CREATE CONFIG FILES - BUILD DIR VERSIONS
 if (NOT (APPLE_IOS OR WINDOWS_STORE OR WINDOWS_PHONE))
diff --git a/RenderSystems/GLSupport/src/GLX/OgreGLXGLSupport.cpp b/RenderSystems/GLSupport/src/GLX/OgreGLXGLSupport.cpp
index 5905baca5..b7ef24197 100644
--- a/RenderSystems/GLSupport/src/GLX/OgreGLXGLSupport.cpp
+++ b/RenderSystems/GLSupport/src/GLX/OgreGLXGLSupport.cpp
@@ -877,10 +877,20 @@ namespace Ogre
         PFNGLXCREATECONTEXTATTRIBSARBPROC _glXCreateContextAttribsARB;
         _glXCreateContextAttribsARB = (PFNGLXCREATECONTEXTATTRIBSARBPROC)const_cast<GLXGLSupport*>(this)->getProcAddress("glXCreateContextAttribsARB");

+        if (!(void *)_glXCreateContextAttribsARB) {
+            std::string msg = "glXCreateContextAttribsARB() function not found";
+            LogManager::getSingleton().logMessage(LML_CRITICAL, msg);
+            // throw std::runtime_error(msg);
+        }
+
         while(!glxContext && (context_attribs[1] >= minVersion))
         {
             ctxErrorOccurred = false;
-            glxContext = _glXCreateContextAttribsARB(mGLDisplay, fbConfig, shareList, direct, context_attribs);
+            if (!_glXCreateContextAttribsARB) {
+                glxContext = glXCreateNewContext(mGLDisplay, fbConfig, GLX_RGBA_TYPE, shareList, true);
+            } else {
+                glxContext = _glXCreateContextAttribsARB(mGLDisplay, fbConfig, shareList, direct, context_attribs);
+            }
             // Sync to ensure any errors generated are processed.
             XSync( mGLDisplay, False );
             if ( !ctxErrorOccurred && glxContext )
diff --git a/RenderSystems/GLSupport/src/GLX/OgreGLXWindow.cpp b/RenderSystems/GLSupport/src/GLX/OgreGLXWindow.cpp
index 78d0212b0..d83c60f10 100644
--- a/RenderSystems/GLSupport/src/GLX/OgreGLXWindow.cpp
+++ b/RenderSystems/GLSupport/src/GLX/OgreGLXWindow.cpp
@@ -597,8 +597,10 @@ namespace Ogre
             }
             else if( _glXSwapIntervalMESA )
                 _glXSwapIntervalMESA( vsync ? mVSyncInterval : 0 );
-            else
+            else if( _glXSwapIntervalSGI )
                 _glXSwapIntervalSGI( vsync ? mVSyncInterval : 0 );
+            else
+                throw std::runtime_error("no glx swap interval function found");
         }

         mContext->endCurrent();
