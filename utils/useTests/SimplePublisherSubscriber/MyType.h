/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FAST_BUFFERS_LICENSE file included in this Fast Buffers distribution.
 *
 *************************************************************************
 * 
 * @file MyType.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastbuffers.
 */

#ifndef _MyType_H_
#define _MyType_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure MyType defined by the user in the IDL file.
 * @ingroup MYTYPE
 */
class eProsima_user_DllExport MyType
{
public:

    /*!
     * @brief Default constructor.
     */
    MyType();
    
    /*!
     * @brief Default destructor.
     */
    ~MyType();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyType that will be copied.
     */
    MyType(const MyType &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyType that will be copied.
     */
    MyType(MyType &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyType that will be copied.
     */
    MyType& operator=(const MyType &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyType that will be copied.
     */
    MyType& operator=(MyType &&x);
    
    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    inline void index(int16_t _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    inline int16_t index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    inline int16_t& index()
    {
        return m_index;
    }
    /*!
     * @brief This function sets a value in member message
     * @param _message New value for member message
     */
    inline void message(std::string _message)
    {
        m_message = _message;
    }

    /*!
     * @brief This function returns the value of member message
     * @return Value of member message
     */
    inline std::string message() const
    {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    inline std::string& message()
    {
        return m_message;
    }
    /*!
     * @brief This function sets a value in member price
     * @param _price New value for member price
     */
    inline void price(float _price)
    {
        m_price = _price;
    }

    /*!
     * @brief This function returns the value of member price
     * @return Value of member price
     */
    inline float price() const
    {
        return m_price;
    }

    /*!
     * @brief This function returns a reference to member price
     * @return Reference to member price
     */
    inline float& price()
    {
        return m_price;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);


    
private:
    int16_t m_index;
    std::string m_message;
    float m_price;
};

#endif // _MyType_H_